@startuml
!theme mars
skinparam classFontName Courier New
skinparam classFontSize 12
struct Pool {
    Lending Pool
    ==abilities==
    Key
    ==members==
    +<b>id:</b> UID (Unique id of the Pool),
    +<b>admin_address:</b> address (Public address of the admin wallet),
    +<b>submarket_ids:</b> VecSet<ID> (Set of Submarket IDs owned by this Pool),
    +<b>borrower_detail_ids:</b> VecMap<address, ID> (ID of a borrower's details)
}

struct SubMarket <<T>> {
    Currency Specific Pool
    ==abilities==
    Key
    ==members==
    +<b>id:</b> UID (Unique ID of the SubMarket),
    +<b>balance:</b> Balance<T> (Balance Held by this Submarket),
    +<b>collaterals:</b> VecMap<address, ColData> (Map of collateral data by address)
}

struct ColData {
    Collateral state of an address in a specific SubMarket
    ==abilities==
    Store
    ==members==
    +<b>gross:</b> u64 Note "(total collateral deposited)"
    +<b>utilized:</b> u64 (utilized collateral amount)
}

struct BorrowerDetail {
    A specific borrower's details
    ==abilities==
    Key
    ==
    +<b>id</b>: UID,
    +<b>address</b>: address, (address of borrower)
    +<b>borrow_record_ids</b>:  vector<ID> (borrow records of this borrower)
}

struct BorrowRecord <<B>> <<C>> {
    Record of a borrow of B against collateral C.
    For each (B,C) pair, there's only one BorrowRecord.
    ==abilities==
    Key
    ==members==
    +<b>id:</b> UID, (Unique BorrowRecord ID)
    +<b>col_amount:</b> u64, (collateral amount)
    +<b>bor_amount:</b> u64 (borrowed amount)
}

Pool --|> BorrowerDetail : owns
BorrowerDetail --|> BorrowRecord : owns
Pool --|> SubMarket : owns
SubMarket --|> ColData : stores
@enduml